---
title: "PS #04"
author: Boyuan Ma
github: https://github.com/mab0y/Stats-506/tree/main/PS-04
format: 
  html:
    embed-resources: true
toc: true
---

[Link to GitHub](https://github.com/mab0y/Stats-506/tree/main/PS-04)

I have provided hyperlinks to all pertinent resources and references that assisted me in addressing this problem.

## Problem 1 - Tidyverse

### a.

Import the libraries and save data it to the environment:

```{r}
#| include = FALSE
library(tidyverse)
```

```{r}
library(nycflights13)

airlines_data <- airlines
airports_data <- airports
flights_data <- flights
planes_data <- planes
weather_data <- weather
```

Use [`left_join`](https://stackoverflow.com/questions/1299871/how-to-join-merge-data-frames-inner-outer-left-right) to merge `flights` and `airports` by `origin` and `faa`:

```{r}
flights_data_origin <- flights_data %>% left_join(airports_data, by = c("origin" = "faa"))
```

Group flights by airport name and calculate the mean and median departure delay per airport:

```{r}
flights_data_origin_summary <- flights_data_origin %>%
  group_by(name) %>%
  summarize(mean_dep_delay = mean(dep_delay, na.rm = TRUE), median_dep_delay = median(dep_delay, na.rm = TRUE)) %>%
  filter(!is.na(name)) %>%
  arrange(desc(mean_dep_delay))%>%
  ungroup()
```

```{r}
#| echo: false
print(flights_data_origin_summary,n=Inf)
```

Repeat the steps for `dest` and `faa`:

```{r}
flights_data_dest <- flights_data %>% left_join(airports_data, by = c("dest" = "faa"))
```

[Count](https://stackoverflow.com/questions/22767893/count-number-of-rows-by-group-using-dplyr) the rows of each group and exclude any destination with under 10 flights:

```{r}
flights_data_dest_summary <- flights_data_dest %>%
  group_by(name) %>%
  summarize(mean_arr_delay = mean(arr_delay, na.rm = TRUE), median_arr_delay = median(arr_delay, na.rm = TRUE), n_row = n()) %>%
  filter(n_row>=10& !is.na(name)) %>%
  arrange(desc(mean_arr_delay))%>%
  select(-n_row)%>%
  ungroup()
```

```{r}
#| echo: false
print(flights_data_dest_summary,n=Inf)
```

### b.

Merge `flights` and `planes` by `tailnum`:

```{r}
flights_data_model <- flights_data %>% left_join(planes, by = "tailnum")
```

Calculate average speed for each model:

```{r}
flights_data_model_summary <- flights_data_model %>%
  group_by(model) %>%
  summarize(average_speed=mean(distance/(air_time/60)), count=n())%>%
  filter(!is.na(model)) %>%
  arrange(desc(average_speed)) %>%
  ungroup() %>%
  head(1)
```

```{r}
#| echo: false
print(flights_data_model_summary,n=Inf)
```

## Problem 2 - get_temp()

```{r}
#| echo: false
nnmaps <- read.csv("~/chicago-nmmaps.csv")
nnmaps$date <- as.Date(nnmaps$date)
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#' get_temp()
#'
#' @param month Month, either a numeric 1-12 or a string
#' @param year A numeric year
#' @param data The data set to obtain data from
#' @param celsius Logically indicating whther the results should be in celsius. Default FALSE
#' @param average_fn  A function with which to compute the mean. Default is mean
#'
#' @return The average temperature for a given month
get_temp <- function(month, year, data, celsius=FALSE, average_fn=mean){
  month_names <- c(
    "January", "February", "March", "April", "May", "June", 
    "July", "August", "September", "October", "November", "December"
  )
  
  if (year>=1997 && year<=2000){year_num <- year}
    else{
      stop("Invalid Year")
    }

  if (is.character(month)) {
    month_num <- which(grepl(pattern = month, x = month_names, ignore.case = TRUE))
  }
    else if (is.numeric(month) && month >= 1 && month <= 12) {
    month_num <- month
    } 
      else {
        stop("Invalid Month")
      }

  result <- data %>% 
    filter(year(date) == year_num & month(date) == month_num) %>%
      summarize(avg_temp = average_fn(temp))
  
  if(celsius) {
    result <- result %>%
      mutate(avg_temp = (avg_temp - 32) * 5/9)
  }
  
  return(result$avg_temp)
}
```

```{r}
#| error: true
get_temp("Apr", 1999, data = nnmaps)
get_temp("Apr", 1999, data = nnmaps, celsius = TRUE)
get_temp(10, 1998, data = nnmaps, average_fn = median)
get_temp(13, 1998, data = nnmaps)
get_temp(2, 2005, data = nnmaps)
get_temp("November", 1999, data =nnmaps, celsius = TRUE,
         average_fn = function(x) {
           x %>% sort -> x
           x[2:(length(x) - 1)] %>% mean %>% return
         })
```

## Problem 3 - SAS

### a.
[a-results](https://github.com/mab0y/Stats-506/blob/main/PS-04/a-results.html) 

California has the highest percentage of records and 2.08956% of all records correspond to Michigan:
``` sas
%let in_path = ~/PS04_Problem3_SAS/input_data;
%let out_path = ~/PS04_Problem3_SAS/output_data; 
libname in_lib "&in_path."; 
libname out_lib "&out_path.";

data in_lib.recs2020_public_v5;
  set in_lib.recs2020_public_v5;
  nweight_sq = nweight * nweight;
run; 

proc summary data=in_lib.recs2020_public_v5;
  class state_name; 
  output out=out_lib.ess_by_states_recs2020
    sum(nweight) = num
    sum(nweight_sq) = den;
run; 

data out_lib.ess_by_states_recs2020; 
  set out_lib.ess_by_states_recs2020;
  where _type_ = 1; 
  ess = num * num / den; 
  drop num den _type_;
run;

proc summary data=out_lib.ess_by_states_recs2020;
  var ess;
  output out = out_lib.ess_total_sum (drop=_type_ _freq_) 
  sum=total_ess;
run;

data out_lib.ess_by_states_recs2020_pct;
  set out_lib.ess_by_states_recs2020;
  if _n_ = 1 then set out_lib.ess_total_sum;
  pct = ess / total_ess * 100;
run;

proc sort data=out_lib.ess_by_states_recs2020_pct
  out = out_lib.ess_by_states_recs2020_pct_sort;
  by descending pct;
run;

data out_lib.michigan_pct;
    set out_lib.ess_by_states_recs2020_pct;
    where state_name = "Michigan";
run;

proc print data = out_lib.ess_by_states_recs2020_pct_sort;
proc print data = out_lib.michigan_pct;
```

### b.
[b-results](https://github.com/mab0y/Stats-506/blob/main/PS-04/b-results.html) 
```sas
%let in_path = ~/PS04_Problem3_SAS/input_data;
%let out_path = ~/PS04_Problem3_SAS/output_data; 
libname in_lib "&in_path."; 
libname out_lib "&out_path.";

data out_lib.positive_electricity_cost;
	set in_lib.recs2020_public_v5;
	where dollarel > 0;
run;

proc univariate data=out_lib.positive_electricity_cost;
    var dollarel;
    histogram dollarel;
run;
```

### c.
[c-results](https://github.com/mab0y/Stats-506/blob/main/PS-04/c-results.html) 
```sas
%let in_path = ~/PS04_Problem3_SAS/input_data;
%let out_path = ~/PS04_Problem3_SAS/output_data; 
libname in_lib "&in_path."; 
libname out_lib "&out_path.";

data out_lib.positive_electricity_logcost;
	set in_lib.recs2020_public_v5;
	where dollarel > 0;
	log_dollarel = log(dollarel);
run;

proc univariate data=out_lib.positive_electricity_logcost;
    var log_dollarel;
    histogram log_dollarel;
run;
```

### d.
[d-results](https://github.com/mab0y/Stats-506/blob/main/PS-04/d-results.html) 
```sas
%let in_path = ~/PS04_Problem3_SAS/input_data;
%let out_path = ~/PS04_Problem3_SAS/output_data; 
libname in_lib "&in_path."; 
libname out_lib "&out_path.";

proc reg data=out_lib.positive_electricity_logcost;
    model log_dollarel=totrooms prkgplc1;
    weight nweight;
    where prkgplc1 in (0, 1);
    output out=out_lib.predicted_logcost predicted=predicted_log_dollarel;
run;
quit;
```

### e.
[e-results](https://github.com/mab0y/Stats-506/blob/main/PS-04/e-results.html) 
```sas
%let in_path = ~/PS04_Problem3_SAS/input_data;
%let out_path = ~/PS04_Problem3_SAS/output_data; 
libname in_lib "&in_path."; 
libname out_lib "&out_path.";

data actual_predicted;
	set out_lib.predicted_logcost(keep=predicted_log_dollarel dollarel);
    predicted_dollarel = exp(predicted_log_dollarel);
    drop predicted_log_dollarel;
run;

proc sgplot data=actual_predicted;
   scatter y=predicted_dollarel x=dollarel;
run;
```
