---
title: "PS #05"
author: Boyuan Ma
github: https://github.com/mab0y/Stats-506/tree/main/PS-05
format: 
  html:
    embed-resources: true
toc: true
---

[Link to GitHub](https://github.com/mab0y/Stats-506/tree/main/PS-05)

I have provided hyperlinks to all pertinent resources and references that assisted me in addressing this problem.

## Problem 1 - Plotting
```{r}
#| output: false
library(tidyverse)
library(ggplot2)
nnmaps <- read.csv("~/chicago-nmmaps.csv")
```

### a.
Calculate Celsius temperature and mean value, group it by month and season:
```{r}
#| output: false
nnmaps$celsius<-(nnmaps$temp-32)*5/9
monthly_avg <- nnmaps %>%
  group_by(month, season) %>%
  summarise(mean_temp = mean(celsius, na.rm = TRUE)) %>%
  mutate(month = factor(month, levels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")))
```

```{r}
#| code-fold: true
ggplot(data = monthly_avg, aes(x = month, y = mean_temp, group = season, color = season)) +
  geom_line(size = 1) +
  geom_point(size = 2) +
  labs(title = "Mean Monthly Temperature",
       x = "Month",
       y = "Mean Temperature (째C)",
       color = "Season")
```

### b.
Calculate mean value for four variables, group them by month and season:
```{r}
#| output: false
monthly_avg_all <- nnmaps %>%
  group_by(month, season) %>%
  summarise(mean_temp = mean(celsius, na.rm = TRUE),
            mean_o3 = mean(o3, na.rm = TRUE),
            mean_pm10 = mean(pm10, na.rm = TRUE),
            mean_dewpoint = mean(dewpoint, na.rm = TRUE)) %>%
  mutate(month = factor(month, levels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")))
```

```{r}
#| code-fold: true
ggplot(data = monthly_avg_all, aes(x = month, group = season)) +
  geom_line(aes(y = mean_temp, color = "Temperature(째C)"), size = 1) +
  geom_point(aes(y = mean_temp, color = "Temperature(째C)"), size = 2) +
  geom_line(aes(y = mean_o3, color = "O3"), size = 1) +
  geom_point(aes(y = mean_o3, color = "O3"), size = 2) +
  geom_line(aes(y = mean_pm10, color = "PM10"), size = 1) +
  geom_point(aes(y = mean_pm10, color = "PM10"), size = 2) +
  geom_line(aes(y = mean_dewpoint, color = "Dewpoint"), size = 1) +
  geom_point(aes(y = mean_dewpoint, color = "Dewpoint"), size = 2) +
  labs(title = "Mean Monthly Temperature(째C), O3, PM10 and Dewpoint",
       x = "Month",
       y = "Mean Value",
       color = "Variable")
```
`PM10` seems to have the least seasonal trend.

## Problem 2 - OOP Programming
### a.
Constructor:
```{r}
setClass("poly",
         slots = c(
           coefficients = "numeric",
           powers = "numeric"))

make_poly <- function(coefficients, powers){
  return(new("poly", coefficients = coefficients, powers = powers))
}
```

Validator (I referred to [duplicated](https://stat.ethz.ch/R-manual/R-devel/library/base/html/duplicated.html#:~:text=duplicated()%20determines%20which%20elements,elements%20(rows)%20are%20duplicates.)
):
```{r}
#| output: false
setValidity("poly", function(object){
  if (length(object@coefficients) != length(object@powers)){
    stop("Lengths of coefficients and powers must be equal")
  }
  if (any(object@powers < 0)){
    stop("Powers must be non-negative integer")
  }
  if (any(duplicated(object@powers))) {
    stop("Powers cannot be duplicated")
  }
  if (any(object@powers != as.integer(object@powers))) {
    stop("Powers must be integers")
  }
  return(TRUE)
})
```

`show` method:
```{r}
setMethod("show", "poly", function(object) {
  non_zero_indices <- which(object@coefficients != 0)
  non_zero_coefficients <- object@coefficients[non_zero_indices]
  non_zero_powers <- object@powers[non_zero_indices]
  terms <- paste0(non_zero_coefficients, "x^", non_zero_powers)
  terms <- sub("x\\^0", "", terms)
  terms <- sub("1x", "x", terms)
  terms <- paste(terms, collapse = " + ")
  cat(gsub("\\+ -", "- ", terms))
})
```

Addition and substraction:
```{r}
setMethod("+", c("poly", "poly"), function(e1, e2) {
  e1_list <- setNames(e1@coefficients,as.character(e1@powers))
  e2_list <- setNames(e2@coefficients,as.character(e2@powers))
  all_powers <- as.character(sort(unique(c(e1@powers, e2@powers)), decreasing = TRUE))
  combined_list <- setNames(numeric(length(all_powers)), as.character(all_powers))
  for (power in all_powers) {
    combined_list[power] <- sum(e1_list[power], e2_list[power], na.rm = TRUE)
  }
  return(make_poly(combined_list, as.integer(names(combined_list))))
})
  
setMethod("-", c("poly", "poly"), function(e1, e2) {
  e2@coefficients <- -e2@coefficients
  return(e1 + e2)
})
```

### b.
```{r}
p1 <- make_poly(c(3, 2), c(2, 0))
p2 <- make_poly(c(7, -2, -1, 17), c(3, 2, 1, 0))
```

```{r}
p1
p2
```

```{r}
p1 + p2
p1 - p2
```

## Problem 3 - data.table
```{r}
#| output: false
library(nycflights13)
library(data.table)
flights <- as.data.table(flights)
airports <- as.data.table(airports)
planes <- as.data.table(planes)
```
### a.
```{r}
departure <- flights[, .(mean_delay = mean(dep_delay, na.rm = TRUE),
                     med_delay = median(dep_delay, na.rm = TRUE),
                     faa = origin,
                     numflights = .N),by = origin] |>
                    _[numflights>10] |> 
                    merge(x=_, airports, by = 'faa', all.x=TRUE) |>
                    _[order(-mean_delay)] |>
                    _[, .(name, mean_delay, med_delay)] |>
                    print(x=_, n = Inf)
```

```{r}
arrival <- flights[, .(mean_delay = mean(arr_delay, na.rm = TRUE),
                   med_delay = median(arr_delay, na.rm = TRUE),
                         faa = dest,
                         numflights = .N),by = dest] |>
                  _[numflights>10] |> 
                  merge(x=_, airports, by = 'faa', all.x=TRUE) |>
                  _[order(-mean_delay)] |>
                  _[, .(name, mean_delay, med_delay)] |>
                  print(x=_, n = Inf)
```

### b.
```{r}
average_speed <- flights |>
                merge(x=_, planes, by = "tailnum") |>
                _[, .(model, distance, time = air_time/60)] |>
                _[, .(model, mph = distance/time)] |>
                _[, .(avgmph = mean(mph, na.rm = TRUE),
                 nflights = .N), by = model] |>
                _[order(-avgmph)] |>
                _[1] |>
                print(x=_)
```