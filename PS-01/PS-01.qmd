---
title: "PS #01"
format: html

---

## Problem 1 - Wine data

### a.

First, import the data from `wine.data` to the `wine_df`

```{r}
wine_df <- read.csv("~/桌面/Stats-506/PS-01/wine.data",header=FALSE)
```

Then, give appropriate column names to the `wine_df`

```{r}
colnames(wine_df) <- c('class','Alcohol','Malic acid','Ash','Alcalinity of ash','Magnesium','Total phenols','Flavanoids','Nonflavanoid phenols',
'Proanthocyanins','Color intensity','Hue','OD280/OD315 of diluted wines','Proline')
```

This shows the first 10 rows of the `wine_df`:

```{r}
#| echo: false
wine_df[1:10,]
```

### b.

Next, check the number of wines within each class:

```{r}
table(wine_df$class)
```

This is exactly the same as in `wine.names`

### c.

The wine with the highest alcohol content belongs to class 1:

```{r}
wine_df[which.max(wine_df$Alcohol),"class"]
```

The wine with the highest alcohol content belongs to class 2:

```{r}
wine_df[which.min(wine_df$Alcohol),"class"]
```

  26 wines have higher levels of magnesium than 114 mg/l of magnesium:

```{r}
sum(wine_df$Magnesium>114)
```

15 class one, 6 class two and 5 class three have higher levels of magnesium than average German beer:

```{r}
table(wine_df[which(wine_df$Magnesium>114),"class"])
```

### d.
First, calculate mean of overall dataframe and of each class:
```{r}
avg_overall<-lapply(wine_df,mean)
avg_1<-lapply(wine_df[which(wine_df$class==1),],mean)
avg_2<-lapply(wine_df[which(wine_df$class==2),],mean)
avg_3<-lapply(wine_df[which(wine_df$class==3),],mean)
```
Then use map to combine the lists, change it to data.frame object and change the name of rows
`https://stackoverflow.com/questions/60605598/r-combine-two-lists-with-same-column-names`: helped me figure out to use Map to combine the lists
```{r}
avg_combine<-Map(c,avg_overall,avg_1,avg_2,avg_3)
avg_combine<-data.frame(avg_combine)
rownames(avg_combine)<-c("Overall","Class 1","Class 2","Class 3")
```
```{r}
#| echo: false
avg_combine
```
### e.
First, calculate number of sample from each class
```{r}
num_class <- table(wine_df$class)
```
Then, calculate mean and variance for each class
```{r}
wine_df_mean <- tapply(wine_df$Ash,wine_df$class,mean)
wine_df_var <- tapply(wine_df$Ash,wine_df$class,var)
```

Next,calculate t-stats, degree of freedom and p-value for class 1 and class 2
```{r}
ts_12<-abs((wine_df_mean[1]-wine_df_mean[2])/sqrt(wine_df_var[1]/num_class[1]+wine_df_var[2]/num_class[2]))
df_12<-(wine_df_var[1]/num_class[1]+wine_df_var[2]/num_class[2])^2/((wine_df_var[1]/num_class[1])^2/(num_class[1]-1)+(wine_df_var[2]/num_class[2])^2/(num_class[2]-1))
pt_12<-2*pt(ts_12, df_12,lower.tail=FALSE)
```
p-value equals `r pt_12`,the level of Ash differs across the class 1 and class 2 at the 95% confidence level.

Finally, use built-in t-test method to verify the result:
```{r}
#| echo: false
t.test(wine_df[which(wine_df$class==1),"Ash"],wine_df[which(wine_df$class==2),"Ash"])
```


Repeat the steps for class 1 and class 3:
```{r}
ts_13<-abs((wine_df_mean[1]-wine_df_mean[3])/sqrt(wine_df_var[1]/num_class[1]+wine_df_var[3]/num_class[3]))
df_13<-(wine_df_var[1]/num_class[1]+wine_df_var[3]/num_class[3])^2/((wine_df_var[1]/num_class[1])^2/(num_class[1]-1)+(wine_df_var[3]/num_class[3])^2/(num_class[3]-1))
pt_13<-2*pt(ts_13, df_13,lower.tail=FALSE)
```
p-value equals `r pt_13`,we cannot say that the level of Ash differs across the class 1 and class 3 at the 95% confidence level.
```{r}
#| echo: false
t.test(wine_df[which(wine_df$class==1),"Ash"],wine_df[which(wine_df$class==3),"Ash"],alternative = "two.sided")
```

Repeat the steps for class 2 and class 3:
```{r}
ts_23<-abs((wine_df_mean[2]-wine_df_mean[3])/sqrt(wine_df_var[2]/num_class[2]+wine_df_var[3]/num_class[3]))
df_23<-(wine_df_var[2]/num_class[2]+wine_df_var[3]/num_class[3])^2/((wine_df_var[2]/num_class[2])^2/(num_class[2]-1)+(wine_df_var[3]/num_class[3])^2/(num_class[3]-1))
pt_23<-2*pt(ts_23, df_23,lower.tail=FALSE)
```
p-value equals `r pt_13`,the level of Ash differs across the class 1 and class 3 at the 95% confidence level.
```{r}
#| echo: false
t.test(wine_df[which(wine_df$class==2),"Ash"],wine_df[which(wine_df$class==3),"Ash"])
```
## Problem 2 - Perfect Powers
### a.
```{r}
# Function to find the root of a given number and power if exists
isPerfectPower <- function(num, power){
  # Begin with root equals 1
  root <- 1
  # Loop until the result reach power
  while (root^power <= num){
    
    if (root^power == num){
      # If root exists, return TRUE and the root
      return(list(isPerfect = TRUE, root = root))
    }
    root <- root + 1
  }
  # If root does not exist, return FALSE and NA
  return(list(isPerfect = FALSE, root = NA))
}
```

```{r}
#| echo: false
isPerfectPower(27, power = 3)
```
### b.
```{r}
findRootPower <- function(num){
  # Start frow the lowerst power 2
  for (power in 2:100){
    if (isPerfectPower(num, power)$isPerfect == TRUE){
      # If root exists for this power, return the expression
      return (sprintf("%.0f = %.0f ^ %.0f", num, isPerfectPower(num, power)$root, power))
    }
  }
  # If under power 100, there is still no root, return not a perfect power
  return (sprintf("%.0f is not a perfect power", num))
}
```

Next, take in some numbers to test the function:
```{r}
#| echo: false
test_num <- c(27, 13060694016, 7776, 170859375, 58247422, 94143178827)
lapply(test_num, findRootPower)
```