---
title: "PS #01"
author: Boyuan Ma
github: https://github.com/mab0y/Stats-506/tree/main/PS-01
format: html
toc: true
---
[Link to GitHub](https://github.com/mab0y/Stats-506/tree/main/PS-01) 


## Problem 1 - Wine data

### a.

>Import the data from `wine.data` to the `wine_df`:

```{r}
wine_df <- read.csv("~/桌面/Stats-506/PS-01/wine.data",header=FALSE)
```

>Give appropriate column names to the `wine_df`:

```{r}
colnames(wine_df) <- c('class','Alcohol','Malic acid','Ash','Alcalinity of ash','Magnesium','Total phenols','Flavanoids','Nonflavanoid phenols',
'Proanthocyanins','Color intensity','Hue','OD280/OD315 of diluted wines','Proline')
```

>This shows the first 10 rows of the `wine_df`:

```{r}
#| echo: false
wine_df[1:10,]
```

### b.

>Check the number of wines within each class:

```{r}
table(wine_df$class)
```

>This is exactly the same as in `wine.names`.

### c.
>The wine with the highest alcohol content belongs to class 1:

```{r}
wine_df[which.max(wine_df$Alcohol),"class"]
```
>The wine with the highest alcohol content belongs to class 2:

```{r}
wine_df[which.min(wine_df$Alcohol),"class"]
```
>26 wines have higher levels of magnesium than 114 mg/l of magnesium:

```{r}
sum(wine_df$Magnesium>114)
```
>15 class one, 6 class two and 5 class three have higher levels of magnesium than average German beer:

```{r}
table(wine_df[which(wine_df$Magnesium>114),"class"])
```

### d.
>Calculate mean of overall dataframe and of each class:

```{r}
avg_overall<-lapply(wine_df,mean)
avg_1<-lapply(wine_df[which(wine_df$class==1),],mean)
avg_2<-lapply(wine_df[which(wine_df$class==2),],mean)
avg_3<-lapply(wine_df[which(wine_df$class==3),],mean)
```
>Use `Map()` to combine the lists, change it to `data.frame` object and change the name of rows:
`https://stackoverflow.com/questions/60605598/r-combine-two-lists-with-same-column-names`: helped me figure out to use `Map()` to combine the lists

```{r}
avg_combine<-Map(c,avg_overall,avg_1,avg_2,avg_3)
avg_combine<-data.frame(avg_combine)
rownames(avg_combine)<-c("Overall","Class 1","Class 2","Class 3")
```
```{r}
#| echo: false
avg_combine
```
### e.
>Calculate number of sample of each class:

```{r}
num_class <- table(wine_df$class)
```
>Calculate mean and variance of each class:

```{r}
wine_df_mean <- tapply(wine_df$Ash,wine_df$class,mean)
wine_df_var <- tapply(wine_df$Ash,wine_df$class,var)
```

>Calculate t-stats, degree of freedom and p-value for class 1 and class 2:

```{r}
ts_12<-abs((wine_df_mean[1]-wine_df_mean[2])/sqrt(wine_df_var[1]/num_class[1]+wine_df_var[2]/num_class[2]))
df_12<-(wine_df_var[1]/num_class[1]+wine_df_var[2]/num_class[2])^2/((wine_df_var[1]/num_class[1])^2/(num_class[1]-1)+(wine_df_var[2]/num_class[2])^2/(num_class[2]-1))
pt_12<-2*pt(ts_12, df_12,lower.tail=FALSE)
```
>p-value equals `r pt_12`,the level of Ash differs across the class 1 and class 2 at the 95% confidence level.

>Use built-in t-test method to verify the result:

```{r}
#| echo: false
t.test(wine_df[which(wine_df$class==1),"Ash"],wine_df[which(wine_df$class==2),"Ash"])
```


>Repeat the steps for class 1 and class 3:

```{r}
ts_13<-abs((wine_df_mean[1]-wine_df_mean[3])/sqrt(wine_df_var[1]/num_class[1]+wine_df_var[3]/num_class[3]))
df_13<-(wine_df_var[1]/num_class[1]+wine_df_var[3]/num_class[3])^2/((wine_df_var[1]/num_class[1])^2/(num_class[1]-1)+(wine_df_var[3]/num_class[3])^2/(num_class[3]-1))
pt_13<-2*pt(ts_13, df_13,lower.tail=FALSE)
```
>p-value equals `r pt_13`, we cannot say that the level of Ash differs across the class 1 and class 3 at the 95% confidence level.

```{r}
#| echo: false
t.test(wine_df[which(wine_df$class==1),"Ash"],wine_df[which(wine_df$class==3),"Ash"],alternative = "two.sided")
```

>Repeat the steps for class 2 and class 3:

```{r}
ts_23<-abs((wine_df_mean[2]-wine_df_mean[3])/sqrt(wine_df_var[2]/num_class[2]+wine_df_var[3]/num_class[3]))
df_23<-(wine_df_var[2]/num_class[2]+wine_df_var[3]/num_class[3])^2/((wine_df_var[2]/num_class[2])^2/(num_class[2]-1)+(wine_df_var[3]/num_class[3])^2/(num_class[3]-1))
pt_23<-2*pt(ts_23, df_23,lower.tail=FALSE)
```
>p-value equals `r pt_13`,the level of Ash differs across the class 1 and class 3 at the 95% confidence level.

```{r}
#| echo: false
t.test(wine_df[which(wine_df$class==2),"Ash"],wine_df[which(wine_df$class==3),"Ash"])
```
## Problem 2 - Perfect Powers
### a.
```{r}
# Function to find the root of a given number and power if exists
isPerfectPower <- function(num, power){
  # Begin with root equals 1
  root <- 1
  # Loop until the result reach power
  while (root^power <= num){
    
    if (root^power == num){
      # If root exists, return TRUE and the root
      return(list(isPerfect = TRUE, root = root))
    }
    root <- root + 1
  }
  # If root does not exist, return FALSE and NA
  return(list(isPerfect = FALSE, root = NA))
}
```

```{r}
#| echo: false
isPerfectPower(27, power = 3)
```
### b.
```{r}
findRootPower <- function(num){
  # Start frow the lowerst power 2
  for (power in 2:100){
    if (isPerfectPower(num, power)$isPerfect == TRUE){
      # If root exists for this power, return the expression
      return (sprintf("%.0f = %.0f ^ %.0f", num, isPerfectPower(num, power)$root, power))
    }
  }
  # If until power of 100, there is still no root, return not a perfect power
  return (sprintf("%.0f is not a perfect power", num))
}
```

>Take in some numbers to test the function:
```{r}
#| echo: false
test_num <- c(27, 13060694016, 7776, 170859375, 58247422, 94143178827)
lapply(test_num, findRootPower)
```

## Problem 3 - ChatGPT
### a.
>Here are two R functions that accomplish the tasks you described. The first function `determine_poker_hand` takes a vector of suits and a vector of ranks representing a 5-card hand and returns the name of the hand in 5-card stud poker. The second function `deal_poker_round` simulates dealing a round of cards in a game of poker (5-card stud) for a specified number of players, displays all the hands, and uses the first function to determine the name of each hand.

```{r}
#| eval: false
# Function to determine the name of a poker hand
determine_poker_hand <- function(suits, ranks) {
  # Function to count the occurrences of each rank
  count_ranks <- function(ranks) {
    rank_count <- table(ranks)
    return(rank_count)
  }
  
  # Function to check for a flush
  is_flush <- function(suits) {
    return(length(unique(suits)) == 1)
  }
  
  # Function to check for a straight
  is_straight <- function(ranks) {
    sorted_ranks <- sort(unique(ranks))
    return(length(sorted_ranks) == 5 && max(sorted_ranks) - min(sorted_ranks) == 4)
  }
  
  # Count the occurrences of each rank
  rank_count <- count_ranks(ranks)
  
  # Check for a flush
  flush <- is_flush(suits)
  
  # Check for a straight
  straight <- is_straight(ranks)
  
  # Determine the poker hand
  if (flush && straight) {
    return("Straight Flush")
  } else if (max(rank_count) == 4) {
    return("Four of a Kind")
  } else if (max(rank_count) == 3 && length(rank_count) == 2) {
    return("Full House")
  } else if (flush) {
    return("Flush")
  } else if (straight) {
    return("Straight")
  } else if (max(rank_count) == 3) {
    return("Three of a Kind")
  } else if (max(rank_count) == 2 && length(rank_count) == 3) {
    return("Two Pair")
  } else if (max(rank_count) == 2) {
    return("One Pair")
  } else {
    return("High Card")
  }
}

# Function to simulate dealing a round of poker
deal_poker_round <- function(num_players) {
  # Define the suits and ranks in a deck of cards
  suits <- rep(c("Hearts", "Diamonds", "Clubs", "Spades"), each = 13)
  ranks <- rep(2:10, times = 4)
  ranks <- c(ranks, "Jack", "Queen", "King", "Ace")
  
  # Create a deck of cards
  deck <- data.frame(Suit = suits, Rank = ranks)
  
  # Shuffle the deck
  deck <- deck[sample(nrow(deck)), ]
  
  # Deal cards to players
  hands <- list()
  for (i in 1:num_players) {
    start <- (i - 1) * 5 + 1
    end <- i * 5
    hand <- deck[start:end, ]
    hands[[i]] <- hand
    cat("Player", i, "hand:\n")
    print(hand)
    cat("Hand Name:", determine_poker_hand(hand$Suit, hand$Rank), "\n\n")
  }
}

# Example usage:
deal_poker_round(4)  # Simulate a round of poker with 4 players
```

>You can call the `deal_poker_round` function with the number of players you want to simulate, and it will display the hands for each player along with the name of their poker hand using the `determine_poker_hand` function.

### b.
Run the code, it shows:
```
Error in data.frame(Suit = suits, Rank = ranks) :
Arguments imply differing number of rows: 52, 40
3.stop(gettextf("arguments imply differing number of rows: %s",
paste(unique(nrows), collapse = ", ")), domain = NA)
2.data.frame(Suit = suits, Rank = ranks)
1.deal_poker_round(4)
```
This occurs because ChatGPT count "Jack", "Queen", "King", "Ace" only once and generated only 40 cards. We also need to change "Jack", "Queen", "King", "Ace" to numeric numbers to do the max(min) and comparison operator:
```{r}
ranks <- rep(2:10, times = 4)
  ranks <- c(ranks, "Jack", "Queen", "King", "Ace")
```
Change these two lines into(11,12,13,1=="Jack", "Queen", "King", "Ace"), now it works:
```{r}
ranks <- rep(c(1:13), times = 4)
```

Demonstrate it with a range of inputs:
```{r}
#| echo: false
# Function to determine the name of a poker hand
determine_poker_hand <- function(suits, ranks) {
  # Function to count the occurrences of each rank
  count_ranks <- function(ranks) {
    rank_count <- table(ranks)
    return(rank_count)
  }
  
  # Function to check for a flush
  is_flush <- function(suits) {
    return(length(unique(suits)) == 1)
  }
  
  # Function to check for a straight
  is_straight <- function(ranks) {
    sorted_ranks <- sort(unique(ranks))
    return(length(sorted_ranks) == 5 && max(sorted_ranks) - min(sorted_ranks) == 4)
  }
  
  # Count the occurrences of each rank
  rank_count <- count_ranks(ranks)
  
  # Check for a flush
  flush <- is_flush(suits)
  
  # Check for a straight
  straight <- is_straight(ranks)
  
  # Determine the poker hand
  if (flush && straight) {
    return("Straight Flush")
  } else if (max(rank_count) == 4) {
    return("Four of a Kind")
  } else if (max(rank_count) == 3 && length(rank_count) == 2) {
    return("Full House")
  } else if (flush) {
    return("Flush")
  } else if (straight) {
    return("Straight")
  } else if (max(rank_count) == 3) {
    return("Three of a Kind")
  } else if (max(rank_count) == 2 && length(rank_count) == 3) {
    return("Two Pair")
  } else if (max(rank_count) == 2) {
    return("One Pair")
  } else {
    return("High Card")
  }
}

# Function to simulate dealing a round of poker
deal_poker_round <- function(num_players) {
  # Define the suits and ranks in a deck of cards
  suits <- rep(c("Hearts", "Diamonds", "Clubs", "Spades"), each = 13)
  ranks <- rep(c(1:13), times = 4)
  
  # Create a deck of cards
  deck <- data.frame(Suit = suits, Rank = ranks)
  
  # Shuffle the deck
  deck <- deck[sample(nrow(deck)), ]
  
  # Deal cards to players
  hands <- list()
  for (i in 1:num_players) {
    start <- (i - 1) * 5 + 1
    end <- i * 5
    hand <- deck[start:end, ]
    hands[[i]] <- hand
    cat("Player", i, "hand:\n")
    print(hand)
    cat("Hand Name:", determine_poker_hand(hand$Suit, hand$Rank), "\n\n")
  }
}
deal_poker_round(5)
deal_poker_round(8)
```
### c.
Explain line-by-line what the code is doing, here I comment the code:
```{r}
# Function to determine the name of a poker hand
determine_poker_hand <- function(suits, ranks) {
  # Function to count the occurrences of each rank
  count_ranks <- function(ranks) {
    # Use the table to count the number of each rank
    rank_count <- table(ranks)
    return(rank_count)
  }
  
  # Function to check for a flush
  is_flush <- function(suits) {
  # The unique() function will give non-repeat elements and if              length of unique suits equals 1, five cards are of the same suit as a     flush. Eg: "Hearts"，"Hearts"，"Hearts"，"Hearts"，"Hearts"
    return(length(unique(suits)) == 1)
  }
  
  # Function to check for a straight
  is_straight <- function(ranks) {
    # sort() function gives out a vector in ascending order, here we          unique() the vector first
    sorted_ranks <- sort(unique(ranks))
    # if the length of sorted_ranks equals 5, it means all the five cards     are unique. Then we calculate the max&min difference, if it is 4, then     it's a straight as five cards in a sequence. Eg: 3,4,5,6,7
    return(length(sorted_ranks) == 5 && max(sorted_ranks) - min(sorted_ranks) == 4)
  }
  # For each player's hand, count the number of rank, and then check if it   is a flush or straight or both
  # Count the occurrences of each rank
  rank_count <- count_ranks(ranks)
  
  # Check for a flush
  flush <- is_flush(suits)
  
  # Check for a straight
  straight <- is_straight(ranks)
  
  # Determine the poker hand it should start from highest to lowest
   # Five cards in a sequence, all in the same suit: is_flush() and       is_straight() return TRUE
   if (flush && straight) {
    return("Straight Flush")
    # All four cards of the same rank: max_count is 4
  } else if (max(rank_count) == 4) {
    return("Four of a Kind")
    # Three of a kind with a pair: max_count is 3 and their should be two     unique rank(3,2)
  } else if (max(rank_count) == 3 && length(rank_count) == 2) {
    return("Full House")
    # Any five cards of the same suit, but not in a sequence: is_flush()      returns TRUE
  } else if (flush) {
    return("Flush")
    # Five cards in a sequence, but not of the same suit: is_straight()       returns TRUE
  } else if (straight) {
    return("Straight")
    # Three cards of the same rank: max_count is 3
  } else if (max(rank_count) == 3) {
    return("Three of a Kind")
    # Two different pairs: max_count is 2 and their should be three unique     rank(2,2,1)
  } else if (max(rank_count) == 2 && length(rank_count) == 3) {
    return("Two Pair")
    # Two cards of the same rank: max_count is 2
  } else if (max(rank_count) == 2) {
    return("One Pair")
    # When you haven't made any of the hands above.
  } else {
    return("High Card")
  }
}

# Function to simulate dealing a round of poker
deal_poker_round <- function(num_players) {
  # Define the suits and ranks in a deck of cards
  # There should be 4 suits, generate 13 of each to combine with ranks      1-13
  suits <- rep(c("Hearts", "Diamonds", "Clubs", "Spades"), each = 13)
  # There should be 13 ranks, generate 4 times, each time will be combined   with one suit
  ranks <- rep(c(1:13), times = 4)
  
  # Create a deck of cards, in each row, it will generate in order "Hearts   2"-"Heart 13"-"Diamonds 1"-"Diamonds 13"-"Clubs 1"-"Clubs 13"-"Spades     1"-"Spades 13", namely all the cards 
  deck <- data.frame(Suit = suits, Rank = ranks)
  
  # Shuffle the deck, sample() will give a random sequence of 52 rows
  deck <- deck[sample(nrow(deck)), ]
  
  # Deal cards to players
  # Create a list of players' hands
  hands <- list()
  # Start from one to the last player
  for (i in 1:num_players) {
    # From the (i-1) * 5+ 1 row to the i * 5 row， this loops in scale of     5 rows
    start <- (i - 1) * 5 + 1
    end <- i * 5
    # Take out these 5 rows which are 5 real cards
    hand <- deck[start:end, ]
    # Give these 5  cards to player i's hand    
    hands[[i]] <- hand
    # Print Player i's hand
    cat("Player", i, "hand:\n")
    # Print the 5 cards which have been taken out and given to player i
    print(hand)
    # Determine player i's poker hand with 5 cards' suit and rank
    cat("Hand Name:", determine_poker_hand(hand$Suit, hand$Rank), "\n\n")
  }
}
```

### d.
> Are the inputs and outputs as described above?

> Inputs and outputs are as described above:
```{r}
suits <- c("Hearts", "Diamonds", "Clubs", "Spades", "Spades") #a vector of suits
ranks <- c(1,2,3,4,5) #a vector of ranks
determine_poker_hand(suits,ranks)
deal_poker_round(5)
```


> Are the hands valid (e.g. real cards, no duplicates, right number)?

> Hands are valid and set up as below. They are not duplicates because they are generated one by one and cards are taken from rows of data.frame each of 5 rows in order which are non-repeating.

```{r}
  suits <- rep(c("Hearts", "Diamonds", "Clubs", "Spades"), each = 13)
  ranks <- rep(c(1:13), times = 4)
  deck <- data.frame(Suit = suits, Rank = ranks)
  print(deck)
```



> Are the names of the hands correct? (See here if you’re not familiar with poker hands.)

> No, Royal flush is not included within `determine_poker_hand`. It is the highest poker hand of A, K, Q, J, 10 and all the same suit. This case is added to the top of if statement and change other statements to elif.

```{r}
#| eval: false
# It is Straight flush and its largest rank is "ACE"
if (flush && straight && max(ranks) == 13) {
    return("Royal Flush")
```

> Does it ensure no duplicates in cards across hands? What happens if you ask for more than 10 hands to be dealt (as there are only 52 cards in a standard deck)?

> Yes, cards are taken from rows of data.frame each of 5 rows in order which are non-repeating. If more than 10 hands are asked to be dealt, the program will crash. To solve this problem an error message is added and the function will stop if more than 10 hands are asked.

```{r}
#| eval: false
  if (num_players > 10) {
    print("Error: Maximum number of players is 10.")
    return(NULL)
  }
```

```{r}
#| echo: false
# Function to determine the name of a poker hand
determine_poker_hand <- function(suits, ranks) {
  # Function to count the occurrences of each rank
  count_ranks <- function(ranks) {
    # Use the table to count the number of each rank
    rank_count <- table(ranks)
    return(rank_count)
  }
  
  # Function to check for a flush
  is_flush <- function(suits) {
    # The unique() function will give non-repeat elements and if length of unique suits equals 1, five cards are of the same suit as a     flush. Eg: "Hearts"，"Hearts"，"Hearts"，"Hearts"，"Hearts"
    return(length(unique(suits)) == 1)
  }
  
  # Function to check for a straight
  is_straight <- function(ranks) {
    # sort() function gives out a vector in ascending order, here we unique() the vector first
    sorted_ranks <- sort(unique(ranks))
    # if the length of sorted_ranks equals 5, it means all the five cards are unique. Then we calculate the max&min difference, if it is 4, then     it's a straight as five cards in a sequence. Eg: 3,4,5,6,7
    return(length(sorted_ranks) == 5 && max(sorted_ranks) - min(sorted_ranks) == 4)
  }
  # For each player's hand, count the number of rank, and then check if it is a flush or straight or both
  # Count the occurrences of each rank
  rank_count <- count_ranks(ranks)
  
  # Check for a flush
  flush <- is_flush(suits)
  
  # Check for a straight
  straight <- is_straight(ranks)
  
  # Determine the poker hand it should start from highest to lowest
  # A, K, Q, J, 10, all the same suit: is_flush() and is_straight() return TRUE and largest rank is "ACE"
  if (flush && straight && max(ranks) == 13) {
    return("Royal Flush")
    # Five cards in a sequence, all in the same suit: is_flush() and is_straight() return TRUE
  } else if (max(rank_count) == 4) {
    return("Four of a Kind")
    # All four cards of the same rank: max_count is 4
  } else if (max(rank_count) == 4) {
    return("Four of a Kind")
    # Three of a kind with a pair: max_count is 3 and their should be two unique rank(3,2)
  } else if (max(rank_count) == 3 && length(rank_count) == 2) {
    return("Full House")
    # Any five cards of the same suit, but not in a sequence: is_flush() returns TRUE
  } else if (flush) {
    return("Flush")
    # Five cards in a sequence, but not of the same suit: is_straight() returns TRUE
  } else if (straight) {
    return("Straight")
    # Three cards of the same rank: max_count is 3
  } else if (max(rank_count) == 3) {
    return("Three of a Kind")
    # Two different pairs: max_count is 2 and their should be three unique rank(2,2,1)
  } else if (max(rank_count) == 2 && length(rank_count) == 3) {
    return("Two Pair")
    # Two cards of the same rank: max_count is 2
  } else if (max(rank_count) == 2) {
    return("One Pair")
    # When you haven't made any of the hands above.
  } else {
    return("High Card")
  }
}

# Function to simulate dealing a round of poker
deal_poker_round <- function(num_players) {
  if (num_players > 10) {
    print("Error: Maximum number of players is 10.")
    return(NULL)
  }
  # Define the suits and ranks in a deck of cards
  # There should be 4 suits, generate 13 of each to combine with ranks 1-13
  suits <- rep(c("Hearts", "Diamonds", "Clubs", "Spades"), each = 13)
  # There should be 13 ranks, generate 4 times, each time will be combined with one suit
  ranks <- rep(c(1:13), times = 4)
  
  # Create a deck of cards, in each row, it will generate in order "Hearts 2"-"Heart 13"-"Diamonds 1"-"Diamonds 13"-"Clubs 1"-"Clubs 13"-"Spades     1"-"Spades 13", namely all the cards 
  deck <- data.frame(Suit = suits, Rank = ranks)
  
  # Shuffle the deck, sample() will give a random sequence of 52 rows
  deck <- deck[sample(nrow(deck)), ]
  
  # Deal cards to players
  # Create a list of players' hands
  hands <- list()
  # Start from one to the last player
  for (i in 1:num_players) {
    # From the (i-1) * 5+ 1 row to the i * 5 row， this loops in scale of 5 rows
    start <- (i - 1) * 5 + 1
    end <- i * 5
    # Take out these 5 rows which are 5 real cards
    hand <- deck[start:end, ]
    # Give these 5  cards to player i's hand    
    hands[[i]] <- hand
    # Print Player i's hand
    cat("Player", i, "hand:\n")
    # Print the 5 cards which have been taken out and given to player i
    print(hand)
    # Determine player i's poker hand with 5 cards' suit and rank
    cat("Hand Name:", determine_poker_hand(hand$Suit, hand$Rank), "\n\n")
  }
}

```{r}
deal_poker_round(12)
```

### Final Version of Code
```{r}
# Function to determine the name of a poker hand
determine_poker_hand <- function(suits, ranks) {
  # Function to count the occurrences of each rank
  count_ranks <- function(ranks) {
    # Use the table to count the number of each rank
    rank_count <- table(ranks)
    return(rank_count)
  }
  
  # Function to check for a flush
  is_flush <- function(suits) {
    # The unique() function will give non-repeat elements and if length of unique suits equals 1, 
    # five cards are of the same suit as a  flush. Eg: "Hearts"，"Hearts"，"Hearts"，"Hearts"，"Hearts"
    return(length(unique(suits)) == 1)
  }
  
  # Function to check for a straight
  is_straight <- function(ranks) {
    # sort() function gives out a vector in ascending order, here we unique() the vector first
    sorted_ranks <- sort(unique(ranks))
    # if the length of sorted_ranks equals 5, it means all the five cards are unique.
    # Then we calculate the max&min difference, if it is 4, then it's a straight as five cards in a sequence. Eg: 3,4,5,6,7
    return(length(sorted_ranks) == 5 && max(sorted_ranks) - min(sorted_ranks) == 4)
  }
  # For each player's hand, count the number of rank, and then check if it is a flush or straight or both
  # Count the occurrences of each rank
  rank_count <- count_ranks(ranks)
  
  # Check for a flush
  flush <- is_flush(suits)
  
  # Check for a straight
  straight <- is_straight(ranks)
  
  # Determine the poker hand it should start from highest to lowest
  # A, K, Q, J, 10, all the same suit: is_flush() and is_straight() return TRUE and largest rank is "ACE"
  if (flush && straight && max(ranks) == 13) {
    return("Royal Flush")
    # Five cards in a sequence, all in the same suit: is_flush() and is_straight() return TRUE
  } else if (max(rank_count) == 4) {
    return("Four of a Kind")
    # All four cards of the same rank: max_count is 4
  } else if (max(rank_count) == 4) {
    return("Four of a Kind")
    # Three of a kind with a pair: max_count is 3 and their should be two unique rank(3,2)
  } else if (max(rank_count) == 3 && length(rank_count) == 2) {
    return("Full House")
    # Any five cards of the same suit, but not in a sequence: is_flush() returns TRUE
  } else if (flush) {
    return("Flush")
    # Five cards in a sequence, but not of the same suit: is_straight() returns TRUE
  } else if (straight) {
    return("Straight")
    # Three cards of the same rank: max_count is 3
  } else if (max(rank_count) == 3) {
    return("Three of a Kind")
    # Two different pairs: max_count is 2 and their should be three unique rank(2,2,1)
  } else if (max(rank_count) == 2 && length(rank_count) == 3) {
    return("Two Pair")
    # Two cards of the same rank: max_count is 2
  } else if (max(rank_count) == 2) {
    return("One Pair")
    # When you haven't made any of the hands above.
  } else {
    return("High Card")
  }
}

# Function to simulate dealing a round of poker
deal_poker_round <- function(num_players) {
  if (num_players > 10) {
    print("Error: Maximum number of players is 10.")
    return(NULL)
  }
  # Define the suits and ranks in a deck of cards
  # There should be 4 suits, generate 13 of each to combine with ranks 1-13
  suits <- rep(c("Hearts", "Diamonds", "Clubs", "Spades"), each = 13)
  # There should be 13 ranks, generate 4 times, each time will be combined with one suit
  ranks <- rep(c(1:13), times = 4)
  
  # Create a deck of cards, in each row, it will generate in order "Hearts 2"-"Heart 13"-"Diamonds 1"-"Diamonds 13"-"Clubs 1"-"Clubs 13"-"Spades     1"-"Spades 13", namely all the cards 
  deck <- data.frame(Suit = suits, Rank = ranks)
  
  # Shuffle the deck, sample() will give a random sequence of 52 rows
  deck <- deck[sample(nrow(deck)), ]
  
  # Deal cards to players
  # Create a list of players' hands
  hands <- list()
  # Start from one to the last player
  for (i in 1:num_players) {
    # From the (i-1) * 5+ 1 row to the i * 5 row， this loops in scale of 5 rows
    start <- (i - 1) * 5 + 1
    end <- i * 5
    # Take out these 5 rows which are 5 real cards
    hand <- deck[start:end, ]
    # Give these 5  cards to player i's hand    
    hands[[i]] <- hand
    # Print Player i's hand
    cat("Player", i, "hand:\n")
    # Print the 5 cards which have been taken out and given to player i
    print(hand)
    # Determine player i's poker hand with 5 cards' suit and rank
    cat("Hand Name:", determine_poker_hand(hand$Suit, hand$Rank), "\n\n")
  }
}
```